<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Usage of This XML : Accessing the Database -->

<!-- Location of DAO / DB조회한 결과를 보낼 경로 -->
<mapper namespace="com.example.gigacf.v1.dao.MenuDao">

	<!-- Inquery of database -->
	<!-- id : Method from MeneDao / resultType : 데이터 타입 -->
	<select id="doList"
		resultType="com.example.gigacf.v1.vo.Coffee_menu">
		SELECT no, coffee, kind, price,
		DATE_FORMAT(reg_day,
		'%Y.%m.%d') AS reg_day,
		DATE_FORMAT(mod_day,
		'%Y.%m.%d') AS mod_day
		FROM
		coffee_menu;
	</select>

	<!-- Inserting data -->
	<!-- id : Method from MeneDao / resultType : 데이터 타입 -->
	<insert id="doInsert">
		<!-- id="doInsert" From Dao -->
		INSERT INTO coffee_menu (coffee, kind, price)
		<!-- coffee_menu (coffee, kind, price) : Database info -->
		VALUES(#{coffee},#{kind},CAST(#{price} as INTEGER))
		<!-- #{augument} : bring augument from Dao_method info -->
		<!-- CAST : 형전환 DB에서 INT SPRING에서 String -->
	</insert>


	<!-- 메뉴 조회 - One row For Update -->
	<select id="doListOne" resultType="map">
		SELECT no, coffee, kind,
		price,
		DATE_FORMAT(reg_day,'%Y.%m.%d') AS reg_day,
		DATE_FORMAT(mod_day,'%Y.%m.%d') AS mod_day
		FROM coffee_menu
		Where no =
		CAST(#{strNo} as INTEGER)
	</select>


	<update id="doUpdate">
		Update coffee_menu
		Set
		coffee = #{coffee},
		kind =
		#{kind},
		price = CAST(#{price} as INTEGER)
		Where no =
		CAST(#{no} as
		INTEGER)
	</update>

	<!-- Deleting data -->
	<delete id="doDelete">
		<!-- id="doDelete" From Dao -->
		Delete from coffee_menu
		Where no = CAST(#{strNo} as INTEGER)
		<!-- coffee_menu, no : From DB -->
		<!-- strNo : From Dao -->
	</delete>

	<!-- Search -->
	<select id="doSearch" resultType="com.example.gigacf.v1.vo.Coffee_menu">
		SELECT no, coffee, kind, price,
		DATE_FORMAT(reg_day, '%Y.%m.%d') AS
		reg_day,
		DATE_FORMAT(mod_day, '%Y.%m.%d') AS mod_day
		FROM coffee_menu
		WHERE 1=1
		<!-- 1=1은 항상 참이므로 아무런 영향을 미치지 않고 모든 조건을 추가 -->
		AND reg_day >= COALESCE(DATE_FORMAT(#{start_date}, '%Y%m%d'),
		'19000101')
		<!-- AND : 다중 조건 -->
		AND reg_day &lt; COALESCE(DATE_ADD(DATE_FORMAT(#{end_date},
		'%Y%m%d'),
		INTERVAL
		+1 DAY), 30000101)
		<!-- &lt; 는 < 을 의미함 -->
		<!-- DATE_ADD 함수를 사용하여 strEndDate에 날짜에대한 연산 -->
		<!-- INTERVAL 키워드는 날짜나 시간을 더하거나 빼는 데 사용 -->
		<if test="coffee != 'ALL'">
			<!-- ALL이 아니면 아래 value를 줘라, 아래 조건을 무시하라 -->
			AND coffee like CONCAT(#{coffee},'%')
		</if>
		<!-- concat 두 개의 문자열을 연결 -->
		<!-- LIKE 연산자는 특정 패턴을 가진 문자열을 검색 -->
		<!-- '%'을 사용하여 특정 문자열로 시작하는 경우를 검색 -->
		AND (#{kind} = 'ALL' OR kind = #{kind})
		<!-- 이 경우 순수 sql문으로 위 <if>과 동일한 기능이 있다. -->

	</select>



	<!--********************************** Update the MultiChecked ********************************** -->


	<!-- Update MultiChecked Price(Loop by spring) | NOT USED, JUST for the 
		PRACTICED -->
	<update id="doUpdatePrice">

		Update coffee_menu set
		price = CAST(#{strPrice} as
		INTEGER)
		Where no = CAST(#{strNo} as INTEGER)

	</update>

	<!-- Update MultiChecked Price Log(Loop by spring) | NOT USED, JUST for 
		the PRACTICED -->
	<insert id="doInsertLog">

		INSERT INTO coffee_menu_log (coffee_no, price)
		VALUES
		( #{strNo},
		CAST(#{strPrice} as INTEGER))

	</insert>


	<!--Update MultiChecked Price(Loop by DynamicSQL, Loop in DB) -->
	<update id="doUpdatePriceDynamicSQL">
		Update coffee_menu set
		price = CAST(#{strPrice} as INTEGER)
		<!-- WHERE no in (1,2,3) 를 아래 코드로 표현가능 -->
		<where>
			<foreach item="item" index="index" collection="chkNoList"
				open="no in (" separator="," close=")" nullable="true">
				<!-- item : Alias for element in list -->
				<!-- chkNoList : list from Dao -->
				<!-- open="no in (" : This attribute specifies the opening part -->
				<!-- separator="," : to be used between elements in the loop -->
				<!-- close=")" : This attribute specifies the closing part of the loop -->

				#{item}
			</foreach>
		</where>

	</update>

	<!-- Update MultiChecked Price Log(Loop by DynamicSQL, Loop in DB) -->
	<insert id="doInsertLogDynamicSQL">

		INSERT INTO coffee_menu_log (coffee_no, price)
		<foreach item="item" index="index" collection="chkNoList"
			separator=" UNION ALL " nullable="true">
			<!-- " UNION ALL " : SQL문으로 두개이상의 SELECT문을 집합적으로 처리하게하는 기능 -->
			SELECT #{item}, CAST(#{strPrice} as INTEGER) FROM DUAL
		</foreach>

	</insert>

	<insert id="doTransactionSeparationLog">
		INSERT INTO transaction_separation_log (class)
		VALUES (#{strClass})
	</insert>



</mapper>